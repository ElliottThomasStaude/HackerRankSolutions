/*
Transcript of problem:

There are N plants in a garden. Each of these plants has been added with some amount of pesticide. After each day, if any plant has more pesticide than the plant at its left, being weaker than the left one, it dies. You are given the initial values of the pesticide in each plant. Print the number of days after which no plant dies, i.e. the time after which there are no plants with more pesticide content than the plant to their left.

-- Input Format

The input consists of an integer N. The next line consists of N integers describing the array P where P[i] denotes the amount of pesticide in plant i.

-- Constraints

1 <= N <= 100000
0 <= P[i] <= 10^9

-- Output Format

Output a single value equal to the number of days after which no plants die.
*/

import java.io.*;
import java.util.*;

public class Solution {

	/*
	Throw inputs on a stack. In sequence, check the plants' pesticide values, and whenever a pesticide value that would result
	in that plant dying occurs, discard it. After going to the bottom of the stack, if any plants died, increment the count of
	days, and then re-add all valid values to the original stack. Repeat until no more dying plants are identified.
	*/
	
    public static void main(String[] args) {
        Scanner inputScanner = new Scanner(System.in);
        long numberOfPlants = inputScanner.nextLong();
        
        ArrayDeque<Long> plantInput = new ArrayDeque<Long>();
        for (long plantIndex = 0L; plantIndex < numberOfPlants; plantIndex++) {
        	long currentPesticideValue = inputScanner.nextLong();
        	plantInput.push(currentPesticideValue);
        }
        ArrayDeque<Long> holderDeque = new ArrayDeque<Long>();
        while (plantInput.size() != 0) {
        	holderDeque.push(plantInput.pop());
        }
        ArrayList<Long> plantRow = new ArrayList<Long>(holderDeque);
        inputScanner.close();
        
        int plantIndex = 0;
        long plantDays = 0;
        boolean plantsStabilized = false;
        while (!plantsStabilized) {
        	System.out.println(plantRow.toString());
        	plantsStabilized = true;
        	long lastPlantPesticideValue = -1;
        	long currentPlantPesticideValue = 0;
        	plantIndex = (int) (numberOfPlants - 1);
        	while (plantIndex != 0) {
        		currentPlantPesticideValue = plantRow.get(plantIndex);
        		System.out.println("----");
        		System.out.println(lastPlantPesticideValue);
        		System.out.println(currentPlantPesticideValue);
        		System.out.println("====");
        		if (currentPlantPesticideValue < lastPlantPesticideValue) {
        			if (plantsStabilized) {
        				plantsStabilized = false;
        				plantRow.remove(plantIndex + 1);
        				numberOfPlants--;
        			}
        		}
        		lastPlantPesticideValue = currentPlantPesticideValue;
        		plantIndex--;
        	}
        	if (!plantsStabilized) {
        		plantDays++;
        	}
        }
        
        System.out.println(plantDays);
    }
}
/*

20
5 30 29 28 27 26 4 25 24 23 22 21 20 19 18 5 17 16 15 5
10

5 [30] 29 28 27 26 4 [25] 24 23 22 21 20 19 18 5 [17] 16 15 5 -> 5 29 28 27 26 4 24 23 22 21 20 19 18 5 16 15 5
5 [29] 28 27 26 4 [24] 23 22 21 20 19 18 5 [16] 15 5 -> 5 28 27 26 4 23 22 21 20 19 18 5 15 5
5 [28] 27 26 4 [23] 22 21 20 19 18 5 [15] 5 -> 5 27 26 4 22 21 20 19 18 5 5
5 [27] 26 4 [22] 21 20 19 18 5 5 -> 5 26 4 21 20 19 18 5 5
5 [26] 4 [21] 20 19 18 5 5 -> 5 4 20 19 18 5 5
5 4 [20] 19 18 5 5 -> 5 4 19 18 5 5
5 4 [19] 18 5 5 -> 5 4 18 5 5
5 4 [18] 5 5 -> 5 4 5 5
5 4 [5] 5 -> 5 4 5
5 4 [5] -> 5 4


9
3 7 1 2 4 8 2 7 10
2

3 [7] 1 [2 4 8] 2 [7 10] -> 3 1 2
3 1 [2] -> 3 1






5 30 29 28 27 26 4 25 24 23 22 21 20 19 18 5 17 16 15 5

5 30 29 28 27 26 {4 (25 24 23 22 21 20 19 18 5 17 16 15) 5}
5 30 29 28 27 26 {4 (24 23 22 21 20 19 18 5 16 15) 5}
5 30 29 28 27 26 {4 (23 22 21 20 19 18 5 15) 5}
5 30 29 28 27 26 {4 (22 21 20 19 18 5) 5}
5 30 29 28 27 26 {4 (21 20 19 18 5) 5}
5 30 29 28 27 26 {4 (20 19 18 5) 5}
5 30 29 28 27 26 {4 (19 18 5) 5}
5 30 29 28 27 26 {4 (18 5) 5}
5 30 29 28 27 26 {4 (5) 5} -> 8
{5 {{4} -> [5]} (5) 5} -> [8]




19 10 0 [13] 13 [16] 14 [16] 13 3 1 [7 14 18] 3 [4 19] 8 8 [18] 11 1 [19] 10 10 5 [6] 0 [16] 3 [9 15 17 19] 14 [19] 7 [10 12] 6 4 1 [2 14] 1 [2 15] 1 [13] 7 [11] 1 [12 15] 3 [4] 1 [18] 15 0 [2] 2 [3 15] 14 11 5 [12] 11 [15] 8 2 0 [1] 1 [8 14 15] 4 [13 17] 1 [16 17] 16 2 1 1 [13] 5 [13] 3 [5 6 15] 1 [3] 0 [11 14] 3

*/