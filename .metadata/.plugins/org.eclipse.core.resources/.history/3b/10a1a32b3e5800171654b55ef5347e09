/*
Transcript of problem:

You are given Q queries. Each query consists of a single number N. You can perform any of the 2 operations on N in each move:

1: If we take 2 integers a and b where N = a x b (a != 1, b != 1) then we can change N = max(a, b)

2: Decrease the value of N by 1.

Determine the minimum number of moves required to reduce the value of N to 0.

--Input Format

The first line contains the integer Q.
The next Q lines each contain an integer, N.

--Constraints

1 <= Q <= 10^3
0 <= N <= 10^6

--Output Format

Output Q lines. Each line containing the minimum number of moves required to reduce the value of N to 0.
*/


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner inputScanner = new Scanner(System.in);
        int queryCount = inputScanner.nextInt();
        for(int queryIndex = 0; queryIndex < queryCount; queryIndex++){
            int parentNumber = inputScanner.nextInt();
            int moveCount = 0;
            while (parentNumber > 0) {
            	System.out.println(parentNumber);
            	int parentNumberRootFloor = (int)Math.floor(Math.sqrt((double)parentNumber));
            	int largestFactorNumber = 1;
            	for (int candidateFactor = parentNumberRootFloor; candidateFactor > 1; candidateFactor--) {
            		System.out.println(parentNumber);
            		if ((parentNumber / (double)candidateFactor) == Math.floor(parentNumber / (double)candidateFactor)) {
            			largestFactorNumber = candidateFactor;
            			parentNumber = parentNumber / largestFactorNumber;
            			candidateFactor = 0;
            		}
            	}
            	if (largestFactorNumber == 1) {
            		parentNumber--;
            	}
            	moveCount++;
            }
            System.out.println(moveCount);
        }
    }
}