/*
Transcript of problem:

Given an array A[] of N distinct elements. Let M_1 and M_2 be the smallest and the next smallest element in the interval [L, R] where 1 <= L < R <= N.

S_i = (((M_1 ^ M_2) (+) (M_1 v M_2)) ^ (M_1 (+) M2)).

where ^, v, (+) are the bitwise operators AND, OR, and XOR respectively.
Your task is to find the maximum possible value of S_i.

-- Input Format

First line contains integer N.
Second line contains N integers, representing elements of the array A[].

-- Constraints 

1 < N <= 10^6
1 <= A_i <= 10^9

-- Output Format

Print the value of maximum possible value of S_i.

*/

import java.io.*;
import java.util.*;

public class Solution {
	
	/*
		((a AND b) XOR (a OR b)) AND (a XOR b)
		
		101010 2 8 32 - 42
		110110 2 4 16 32 - 54
		
		100010
		
		111110
		
		011100
		
		011100
		
		011100
		
		
		
		
		101000
		110110
		
		100000
		
		111110
		
		011110
		
		011110
		
		
		
		
		
	*/
	
	
    public static void main(String[] args) {
        
        for (int iteration = 0; iteration < 100; iteration++) {
        	int firstValue = (int) 9;
            int secondValue = (int) 6;
            
	        int outputValue = (((firstValue & secondValue) ^ (firstValue | secondValue)) & (firstValue ^ secondValue));
	        int outputValue2 = (firstValue ^ secondValue);
	        
	        if (outputValue != outputValue2) {
	        	System.out.println("no");
	        	System.out.println(firstValue);
	        	System.out.println(secondValue);
	        	System.out.println(outputValue);
	        	System.out.println(outputValue2);
	        } else {
	        	System.out.println("yes");
	        	System.out.println(firstValue);
	        	System.out.println(secondValue);
	        	System.out.println(outputValue);
	        	System.out.println(outputValue2);
	        }
	    }
    }
}
