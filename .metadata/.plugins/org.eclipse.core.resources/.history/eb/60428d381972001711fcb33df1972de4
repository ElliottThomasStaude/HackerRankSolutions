/*
Transcript of problem:

You are a waiter at a party. There are N stacked plates on pile A_0. Each plate has a number written on it. Then there will be Q iterations. In i-th iteration, you start picking up the plates in A_(i-1) from the top one by one and check whether the number on the plate is divisible by the i-th prime. If the number is divisible, you stack that plate on pile B_i. Otherwise, you stack that plate on pile A_i. After Q iterations, plate can only be on pile B_1, B_2, ..., B_Q, A_Q. Output numbers on these plates from the top to bottom of each piles in order of B_1, B_2, ..., B_Q, A_Q.

-- Input Format

The first line contains two space separated integers, N and Q.
The next line contains N space separated integers representing the initial pile of plates, i.e., A_0. The leftmost value represents the bottom plate of the pile.

-- Constraints

1 <= N <= 5 x 10^4
2 <= number_i <= 10^4
1 <= Q <= 1200

-- Output Format

Output N lines. Each line contains a number written on the plate. Printing should be done in the order defined above.

*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

	/*
	Begin with array representing B_1, ..., B_Q; initially put all elements on stack A_current. Get the i-th prime. Check if
	the i-th prime is a factor in each member of A_current - if so, increment B_i's int value by 1. Otherwise, push the value
	onto stack A_next. Once A_current is empty, change A_next to A_current and make A_next empty.
	*/
	
	public static int getNextPrime(int currentPrime) throws Exception {
		int nextPrime = -1;
		if (currentPrime < 2) {
			nextPrime = 2;
		} else {
			boolean primeFound = false;
			int candidatePrime = currentPrime;
			while (!primeFound) {
				candidatePrime++;
				int rootValue = (int) Math.floor(Math.sqrt(candidatePrime));
				primeFound = true;
				for (int factorIndex = 0; factorIndex <= rootValue; factorIndex++) {
					if (candidatePrime % factorIndex == 0) {
						primeFound = false;
						break;
					}
				}
			}
			nextPrime = candidatePrime;
		}
		if (nextPrime == -1) {
			throw new Exception("Problem - no prime was found following " + currentPrime);
		}
		return nextPrime;
	}
	
    public static void main(String[] args) {
        Scanner inputScanner = new Scanner(System.in);
        int n = inputScanner.nextInt();
        int q = inputScanner.nextInt();
        
        Stack<Integer> aCurrent = new Stack<Integer>();
        
        for (int index = 0; index < n; index++) {
        	aCurrent.push(inputScanner.nextInt());
        }
        
        Stack<Integer> aNext = new Stack<Integer>();
        int[] bStackArray = new int[q];
        int currentPrime = 1;
        for (int iteration = 1; iteration <= q; iteration++) {
        	try {
        		currentPrime = getNextPrime(currentPrime);
        	} catch (Exception issue) {
        		System.out.println(issue);
        	}
        	
        	while (!aCurrent.empty()) {
        		int plateValue = aCurrent.pop();
        		if (plateValue % currentPrime == 0) {
        			bStackArray[iteration]++;
        		} else {
        			aNext.push(plateValue);
        		}
        	}
        	
        	aCurrent = aNext;
        }
        
        for (int bIndex = 1; bIndex <= q; bIndex++) {
        	System.out.println(bStackArray[bIndex]);
        }
        System.out.println(aCurrent.size());
        
        
        inputScanner.close();
    }
}

